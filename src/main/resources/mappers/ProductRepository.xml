<?xml version="1.0" encoding="UTF-8" ?>

<!-- mapper 설정 하는 코드 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapper를 사용하는 Repository의 전체 경로 -->
<mapper namespace="com.petlog.productService.product.ProductRepository">

  <resultMap id="ProductResultMap" type="com.petlog.productService.entity.Products">
    <id column="id" property="productId"/>  <!-- DB의 id를 userId로 매핑 -->
    <result column="user_id" property="userId"/>
    <result column="name" property="name"/>
    <result column="price" property="price"/>
    <result column="quantity" property="quantity"/>
  </resultMap>

  <resultMap id="getProductsResultMap" type="com.petlog.productService.dto.GetProductsResponseDto" extends="ProductResultMap">
    <collection property="imgUrl" ofType="java.lang.String">
      <result column="img_url"/>
    </collection>
  </resultMap>

  <resultMap id="getWishListResultMap" type="com.petlog.productService.dto.GetWishListResponseDto" >
    <id column="id" property="id"/>
    <result column="product_id" property="productId"/>
    <result column="name" property="name"/>
    <result column="price" property="price"/>
    <result column="quantity" property="quantity"/>
    <collection property="imgUrl" ofType="java.lang.String">
      <result column="img_url"/>
    </collection>
  </resultMap>

  <insert id="createProduct" parameterType="com.petlog.productService.entity.Products" useGeneratedKeys="true" keyProperty="productId">
    INSERT INTO products (user_id, name, price, quantity)
    VALUES (#{userId}, #{name}, #{price}, #{quantity} )
  </insert>


  <insert id="insertProductImage" parameterType="com.petlog.productService.entity.ProductImages" useGeneratedKeys="true" keyProperty="productImageId">
    INSERT INTO product_images (product_id, img_url)
    VALUES (#{productId}, #{imgUrl})
  </insert>

  <select id="getAllProducts" resultMap="getProductsResultMap">
    SELECT p.id, p.user_id, p.name, p.price, p.quantity, pi.img_url
    FROM products p
           LEFT JOIN product_images pi ON p.id = pi.product_id
    WHERE deleted_at IS NULL
  </select>

  <select id="getProductById" parameterType="int" resultMap="getProductsResultMap">
    SELECT p.id, p.user_id, p.name, p.price, p.quantity, pi.img_url
    FROM products p
    LEFT JOIN product_images pi ON p.id = pi.product_id
    WHERE p.id = #{productId}
      AND deleted_at IS NULL
  </select>

  <update id="deleteProduct" parameterType="int">
    UPDATE products
    set deleted_at = NOW()
    WHERE id = #{productId}
  </update>

  <update id="updateProduct" parameterType="map">
    UPDATE products
    set name = #{name},
        price = #{price},
        quantity = #{quantity}
    WHERE id = #{productId}
  </update>

  <select id="findS3KeysByProductId" resultType="string">
    SELECT s3_key FROM product_images WHERE product_id = #{productId}
  </select>

  <delete id="deleteImgByProductId" parameterType="int">
    DELETE FROM product_images WHERE product_id = #{productId}
  </delete>

  <insert id="insertProductImage2">
    INSERT INTO product_images (product_id, img_url, s3_key)
    VALUES
    <foreach collection="list" item="img" separator=",">
      (#{img.productId}, #{img.imgUrl}, #{img.s3Key})
    </foreach>
  </insert>

  <insert id="addWishList" parameterType="com.petlog.productService.entity.WishLists">
    INSERT INTO wishLists (user_id, product_id, quantity)
    VALUES (#{userId}, #{productId}, #{quantity})
  </insert>

  <select id="getWishList" parameterType="int" resultMap="getWishListResultMap">
    SELECT w.id, w.product_id, p.name, p.price, w.quantity, pi.img_url
    FROM wishLists w
     LEFT JOIN products p ON w.product_id = p.id
     LEFT JOIN product_images pi ON p.id = pi.product_id
    WHERE w.user_id = #{userId}
  </select>

  <update id="updateWishList">
    UPDATE wishLists
       SET quantity = #{dto.quantity}
    WHERE product_id = #{dto.productId}
      AND user_id = #{userId}
  </update>

  <delete id="deleteWishList">
    DELETE FROM wishLists
    WHERE id IN
    <foreach collection="dto.selectedItems" item="wishListId" open="(" separator="," close=")">
        #{wishListId}
    </foreach>
      AND user_id = #{userId}
  </delete>

</mapper>